2.1-1
31, 41, 59, 26, 41, 58
31, 41, 59, 26, 41, 58
31, 41, 59, 26, 41, 58
26, 31, 41, 59, 41, 58
26, 31, 41, 41, 59, 58
26, 41, 41, 41, 58, 59

2.1-2
public int[] sort(int[] list) {
	for(int j = 1; j < list.length; ++j) {
		int key = list[j];
		int i = j-1;
		while(i >= 0 && list[i] < key) {
			list[i+1] = list[i];
			i--;
		}
		list[i+1] = key;
	}
	return list;
}

2.1-3
for i = 1 to A.length
	if A[i] == v
		return i
return NIL

At the start of each iteration of the for loop the sub array A[1..i-1] 
does not contain v. If A[i] == v we return i. If we check all indicies
we will fall out of the loop and return NIL

2.1-4)
Add two n-element bit strings A and B and store the result in an 
(n+1)-element bit string, C

for i = 1 to n+1	//zero memory on C
	C[i] = 0
	
for i = n down to 1
	int sum = A[i] + B[i] + C[i]
	if(sum == 1)
		C[i] = 1
	else if(sum[i] == 2)
		C[i+1] = 1
	else if(sum[i] == 3)
		C[i+1] = 1
		C[i] = 1

2.2-1 
O(n^2)

2.2-2
a) Loop Invariant: subarray A[1..j-1] is sorted
b) we only need to do the first n-1 because we perform swaps with the lowest value in the remaining array. After having gone through n-2 iterations we are left with two elements which are either in order already or not; in the latter case a swap will always result in the last element being in correct order.
c) O(n^2), O(n^2)

2.2-3
a) n/2, given equal distribution we can assume that on average we much check half the elements of the array
b) n, in the worst case the element does not exist and we check every element in the array
c) O(n), O(n) - we ignore constants in big-O notation

2.2-4
Make the best case perform the equivalent of verification

2.3-1
       [3 9 26 38 41 49 52 57]
   [3 26 41 52]       [9 38 49 57]
 [3 41]   [26 52]   [38 57]   [9 49]
[3] [41] [52] [26] [38] [57] [9] [49]

2.3.2
private int[] problem_2_3_2_merge(int[] A, int p, int q, int r) {
	int n1 = q-p+1;
	int n2 = r-q;
	int[] L = new int[n1];
	int[] R = new int[n2];
	for(int i = 0; i < n1; ++i)
		L[i] = A[p+i];
	for(int j = 0; j < n2; ++j)
		R[j] = A[q+j+1];
	int i = 0, j = 0, k = p;
	for(; k <= r; ++k) {
		if(i == n1 || j == n2)
			break;
		if(L[i] <= R[j]) {
			A[k] = L[i];
			i++;
		}
		else {
			A[k] = R[j];
			j++;
		}
	}
	if(i == n1) {
		for(; j < n2; j++) {
			A[k] = R[j];
			k++;
		}
	}
	else {
		for(; i < n1; i++) {
			A[k] = L[i];
			k++;
		}
	}
	return A;
}

2.3-3
NOTE:
	Base case, T(n) = 2, not shown for each step
	each step assumes n = 2^k for k > 1
	
T(n) = 2T(n/2) + n -> T(n) = n lg(n)
T(2^k) = 2T(2^k / 2) + 2^k -> T(2^k) = 2^k lg(2^k) = k 2^k
T(2^(k+1)) = 2T(2^(k+1 / 2) + 2^(k+1)
		   = 2T(2 2^k / 2) + 2^(k+1)
		   = 2T(2^k) + 2^(k+1)
		   = 2k 2^k + 2^(k+1)
		   = k 2^(k+1) + 2^(k+1)
		   = 2^(k+1) (k+1)
	QED

2.3-4
T(n) = { O(1)		   ; n = 1
	   { T(n-1) + O(n) ; n > 1
	   
2.3-5
private static int indexOf(int[] A, int key, int min, int max) {
	int mid = min+(max-min)/2;
	if(min > max)
		return -1;
	else if(A[mid] == key)
		return mid;
	else if(A[mid] > key)
		return indexOf(A, key, min, mid);
	else
		return indexOf(A, key, mid+1, max);
}

public static int indexOf(int[] A, int key) {
	return indexOf(A, key, 0, A.length-1);
}

2.3-6
no, even though we can find the correct index (k) in lg(n) time;
we still need to shift the subarray of indicies larger than k by 1
(an O(n) operation).

2.3-7
Sort the array using an O(n lg(n)) or better algorithm then:
for i = 1 to A.length
	key = X-A[i]
	index = BinarySearch(A, key) // O(lg n)
	if index != i
		return true
return false
//note this implementation depends on each element being unique (set)

